"""add quicklook

Revision ID: 535c454d7311
Revises: 13a360a555ca
Create Date: 2024-06-18 09:51:14.715422+00:00

"""

from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import mysql, oracle, postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "535c454d7311"
down_revision: Union[str, None] = "13a360a555ca"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "visit1_quicklook",
        sa.Column(
            "visit_id",
            sa.BIGINT()
            .with_variant(mysql.BIGINT(), "mysql")
            .with_variant(oracle.NUMBER(precision=38, scale=0, asdecimal=False), "oracle")
            .with_variant(sa.BIGINT(), "postgresql"),
            nullable=False,
            comment="Unique identifier.",
        ),
        sa.Column(
            "n_inputs",
            sa.INTEGER().with_variant(mysql.INTEGER(), "mysql").with_variant(sa.INTEGER(), "postgresql"),
            nullable=True,
            comment="Number of CCDs used to compute the visit aggregates.",
        ),
        sa.Column(
            "astrom_offset_mean",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Mean offset of astrometric calibration matches.",
        ),
        sa.Column(
            "astrom_offset_std",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Standard deviation of offsets of astrometric calibration matches.",
        ),
        sa.Column(
            "eff_time",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Effective exposure time.",
        ),
        sa.Column(
            "eff_time_psf_sigma_scale",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Effective exposure time, PSF sigma scale.",
        ),
        sa.Column(
            "eff_time_sky_bg_scale",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Effective exposure time, sky background scale.",
        ),
        sa.Column(
            "eff_time_zero_point_scale",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Effective exposure time, zero point scale.",
        ),
        sa.Column(
            "max_dist_to_nearest_psf",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Maximum distance of an unmasked pixel to its nearest model PSF star.",
        ),
        sa.Column(
            "mean_var",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Mean of the variance plane.",
        ),
        sa.Column(
            "n_psf_star",
            sa.INTEGER().with_variant(mysql.INTEGER(), "mysql").with_variant(sa.INTEGER(), "postgresql"),
            nullable=True,
            comment="Number of stars used for PSF model.",
        ),
        sa.Column(
            "psf_area",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="PSF area.",
        ),
        sa.Column(
            "psf_ixx",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="PSF Ixx moment.",
        ),
        sa.Column(
            "psf_ixy",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="PSF Ixy moment.",
        ),
        sa.Column(
            "psf_iyy",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="PSF Iyy moment",
        ),
        sa.Column(
            "psf_sigma",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="PSF sigma.",
        ),
        sa.Column(
            "psf_star_delta_e1_median",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Median E1 residual (starE1 - psfE1) for PSF stars.",
        ),
        sa.Column(
            "psf_star_delta_e1_scatter",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Scatter (via MAD) of E1 residual (starE1 - psfE1) for PSF stars.",
        ),
        sa.Column(
            "psf_star_delta_e2_median",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Median E2 residual (starE2 - psfE2) for PSF stars.",
        ),
        sa.Column(
            "psf_star_delta_e2_scatter",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Scatter (via MAD) of E2 residual (starE2 - psfE2) for PSF stars.",
        ),
        sa.Column(
            "psf_star_delta_size_median",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Median size residual (starSize - psfSize) for PSF stars.",
        ),
        sa.Column(
            "psf_star_delta_size_scatter",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Scatter (via MAD) of size residual (starSize - psfSize) for stars.",
        ),
        sa.Column(
            "psf_star_scaled_delta_size_scatter",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Scatter (via MAD) of size residual scaled by median size squared.",
        ),
        sa.Column(
            "psf_trace_radius_delta",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Delta (max - min) of model PSF trace radius values evaluated on a grid of unmasked pixels.",
        ),
        sa.Column(
            "sky_bg",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Average sky background.",
        ),
        sa.Column(
            "sky_noise",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="RMS noise of the sky background.",
        ),
        sa.Column(
            "seeing_zenith_500nm",
            sa.DOUBLE()
            .with_variant(mysql.DOUBLE(asdecimal=True), "mysql")
            .with_variant(oracle.BINARY_DOUBLE(), "oracle")
            .with_variant(sa.DOUBLE_PRECISION(), "postgresql"),
            nullable=True,
            comment="Measured PSF sigma, corrected to 500nm and an airmass of 1.",
        ),
        sa.Column(
            "zero_point",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Photometric zero point.",
        ),
        sa.Column(
            "low_snr_source_count",
            sa.INTEGER().with_variant(mysql.INTEGER(), "mysql").with_variant(sa.INTEGER(), "postgresql"),
            nullable=True,
            comment="Count of low signal-to-noise-ratio sources.",
        ),
        sa.Column(
            "high_snr_source_count",
            sa.INTEGER().with_variant(mysql.INTEGER(), "mysql").with_variant(sa.INTEGER(), "postgresql"),
            nullable=True,
            comment="Count of high signal-to-noise-ratio sources.",
        ),
        sa.ForeignKeyConstraint(["visit_id"], ["cdb_latiss.exposure.exposure_id"], name="fk_obs_id"),
        sa.PrimaryKeyConstraint("visit_id"),
        schema="cdb_latiss",
    )
    op.create_table(
        "ccdvisit1_quicklook",
        sa.Column(
            "ccdvisit_id",
            sa.BIGINT()
            .with_variant(mysql.BIGINT(), "mysql")
            .with_variant(oracle.NUMBER(precision=38, scale=0, asdecimal=False), "oracle")
            .with_variant(sa.BIGINT(), "postgresql"),
            nullable=False,
            comment="Unique identifier.",
        ),
        sa.Column(
            "s_ra",
            sa.DOUBLE()
            .with_variant(mysql.DOUBLE(asdecimal=True), "mysql")
            .with_variant(oracle.BINARY_DOUBLE(), "oracle")
            .with_variant(sa.DOUBLE_PRECISION(), "postgresql"),
            nullable=True,
            comment="Central Spatial Position in ICRS; Computed right ascension of CCD center.",
        ),
        sa.Column(
            "s_dec",
            sa.DOUBLE()
            .with_variant(mysql.DOUBLE(asdecimal=True), "mysql")
            .with_variant(oracle.BINARY_DOUBLE(), "oracle")
            .with_variant(sa.DOUBLE_PRECISION(), "postgresql"),
            nullable=True,
            comment="Central Spatial Position in ICRS; Computed declination of CCD center.",
        ),
        sa.Column(
            "zenith_distance",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Zenith distance at observation mid-point.",
        ),
        sa.Column(
            "photometric_calib",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Conversion from DN to nanojansky.",
        ),
        sa.Column(
            "psf_sigma",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="PSF model second-moments determinant radius (center of chip).",
        ),
        sa.Column(
            "sky_bg",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Average sky background.",
        ),
        sa.Column(
            "sky_noise",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="RMS noise of the sky background.",
        ),
        sa.Column(
            "zero_point",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Photometric zero point.",
        ),
        sa.Column(
            "seeing_zenith_500nm",
            sa.DOUBLE()
            .with_variant(mysql.DOUBLE(asdecimal=True), "mysql")
            .with_variant(oracle.BINARY_DOUBLE(), "oracle")
            .with_variant(sa.DOUBLE_PRECISION(), "postgresql"),
            nullable=True,
            comment="Measured PSF sigma, corrected to 500nm and an airmass of 1.",
        ),
        sa.Column(
            "astrom_offset_mean",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Mean offset of astrometric calibration matches.",
        ),
        sa.Column(
            "astrom_offset_std",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Standard deviation of offsets of astrometric calibration matches.",
        ),
        sa.Column(
            "eff_time",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Effective exposure time.",
        ),
        sa.Column(
            "eff_time_psf_sigma_scale",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Effective exposure time, PSF sigma scale.",
        ),
        sa.Column(
            "eff_time_psf_sky_bg_scale",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Effective exposure time, sky backgroundscale.",
        ),
        sa.Column(
            "eff_time_psf_zero_point_scale",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Effective exposure time, zero point scale.",
        ),
        sa.Column(
            "mean_var",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Mean of the variance plane.",
        ),
        sa.Column(
            "n_psf_star",
            sa.INTEGER().with_variant(mysql.INTEGER(), "mysql").with_variant(sa.INTEGER(), "postgresql"),
            nullable=True,
            comment="Number of stars used for PSF model.",
        ),
        sa.Column(
            "psf_area",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="PSF area.",
        ),
        sa.Column(
            "psf_ixx",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="PSF Ixx moment.",
        ),
        sa.Column(
            "psf_ixy",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="PSF Ixy moment.",
        ),
        sa.Column(
            "psf_iyy",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="PSF Iyy moment.",
        ),
        sa.Column(
            "psf_star_delta_e1_median",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Median E1 residual (starE1 - psfE1) for PSF stars.",
        ),
        sa.Column(
            "psf_star_delta_e2_median",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Median E2 residual (starE2 - psfE2) for PSF stars.",
        ),
        sa.Column(
            "psf_star_delta_e1_scatter",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Scatter (via MAD) of E1 residual (starE1 - psfE1) for PSF stars.",
        ),
        sa.Column(
            "psf_star_delta_e2_scatter",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Scatter (via MAD) of E2 residual (starE2 - psfE2) for PSF stars.",
        ),
        sa.Column(
            "psf_star_delta_size_median",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Median size residual (starSize - psfSize) for PSF stars.",
        ),
        sa.Column(
            "psf_star_delta_size_scatter",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Scatter (via MAD) of size residual (starSize - psfSize) for stars.",
        ),
        sa.Column(
            "psf_star_scaled_delta_size_scatter",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Scatter (via MAD) of size residual scaled by median size squared.",
        ),
        sa.Column(
            "psf_trace_radius_delta",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Delta (max - min) of model PSF trace radius values evaluated on a grid of unmasked pixels.",
        ),
        sa.Column(
            "max_dist_to_nearest_psf",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Maximum distance of an unmasked pixel to its nearest model PSF star.",
        ),
        sa.ForeignKeyConstraint(["ccdvisit_id"], ["cdb_latiss.ccdexposure.ccdexposure_id"], name="fk_obs_id"),
        sa.PrimaryKeyConstraint("ccdvisit_id"),
        schema="cdb_latiss",
    )
    op.alter_column(
        "exposure",
        "band",
        existing_type=sa.VARCHAR(length=32),
        comment="Name of the band used to take the exposure.  Abstract filter that is not associated with a particular instrument.",
        existing_comment="Name of the band used to take the exposure where this source was. measured. Abstract filter that is not associated with a particular instrument.",
        existing_nullable=True,
        schema="cdb_latiss",
    )

    # Need to drop and re-create visit1 view before dropping columns
    op.drop_column("exposure", "shutter_close_end", schema="cdb_latiss")
    op.drop_column("exposure", "shutter_close_begin", schema="cdb_latiss")
    op.drop_column("exposure", "shutter_open_begin", schema="cdb_latiss")
    op.drop_column("exposure", "shutter_open_end", schema="cdb_latiss")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "exposure",
        sa.Column(
            "shutter_open_end",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
            comment="End of shutter opening.  TAI, accurate to 10ms.",
        ),
        schema="cdb_latiss",
    )
    op.add_column(
        "exposure",
        sa.Column(
            "shutter_open_begin",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
            comment="Start of shutter opening.  TAI, accurate to 10ms.",
        ),
        schema="cdb_latiss",
    )
    op.add_column(
        "exposure",
        sa.Column(
            "shutter_close_begin",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
            comment="Start of shutter closing.  TAI, accurate to 10ms.",
        ),
        schema="cdb_latiss",
    )
    op.add_column(
        "exposure",
        sa.Column(
            "shutter_close_end",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
            comment="End of shutter opening.  TAI, accurate to 10ms.",
        ),
        schema="cdb_latiss",
    )
    op.alter_column(
        "exposure",
        "band",
        existing_type=sa.VARCHAR(length=32),
        comment="Name of the band used to take the exposure where this source was. measured. Abstract filter that is not associated with a particular instrument.",
        existing_comment="Name of the band used to take the exposure.  Abstract filter that is not associated with a particular instrument.",
        existing_nullable=True,
        schema="cdb_latiss",
    )
    op.drop_table("ccdvisit1_quicklook", schema="cdb_latiss")
    op.drop_table("visit1_quicklook", schema="cdb_latiss")
    # ### end Alembic commands ###
