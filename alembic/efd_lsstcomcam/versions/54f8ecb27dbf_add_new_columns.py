"""add new columns

Revision ID: 54f8ecb27dbf
Revises: 78b5675f409b
Create Date: 2025-08-27 21:51:14.496212+00:00

"""

from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import mysql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "54f8ecb27dbf"
down_revision: Union[str, None] = "78b5675f409b"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "exposure_efd",
        sa.Column(
            "mt_m1m3_glycol_loop_temperature_inside_cell_temp_1",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Mean median temperature inside M1M3 Cell thermocouple 1. See M1M3 documentation for a map of the thermocouples.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "exposure_efd",
        sa.Column(
            "mt_m1m3_glycol_loop_temperature_inside_cell_temp_2",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Mean median temperature inside M1M3 Cell thermocouple 2. See M1M3 documentation for a map of the thermocouples.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "exposure_efd",
        sa.Column(
            "mt_m1m3_glycol_loop_temperature_inside_cell_temp_3",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Mean median temperature inside M1M3 Cell thermocouple 3. See M1M3 documentation for a map of the thermocouples.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "exposure_efd",
        sa.Column(
            "mt_m1m3_glycol_loop_temperature_above_mirror_temp",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Mean median temperature above mirror M1M3. See M1M3 documentation for a map of the thermocouples.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "exposure_efd",
        sa.Column(
            "mt_m2_temperature_ring0",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Mean median temperature on ring0 (LG2-1 A5/A6 OD) thermocouple on M2. See M2 documentation for a map of the thermocouples.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "exposure_efd",
        sa.Column(
            "mt_m2_temperature_ring1",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Mean median temperature on ring1 (LG2-2 A1 INNER) thermocouple on M2. See M2 documentation for a map of the thermocouples.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "exposure_efd",
        sa.Column(
            "mt_m2_temperature_ring2",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Mean median temperature on ring2 (LG2-3 A1 OUTER) thermocouple on M2. See M2 documentation for a map of the thermocouples.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "exposure_efd",
        sa.Column(
            "mt_m2_temperature_ring3",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Mean median temperature on ring3 (LG2-4 A1 OD) thermocouple on M2. See M2 documentation for a map of the thermocouples.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "exposure_efd",
        sa.Column(
            "mt_m2_temperature_ring4",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Mean median temperature on ring4 (LG3-1 A4 INNER) thermocouple on M2. See M2 documentation for a map of the thermocouples.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "exposure_efd",
        sa.Column(
            "mt_m2_temperature_ring5",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Mean median temperature on ring5 (LG3-2 A2/A3 INNER (not mounted)) thermocouple on M2. See M2 documentation for a map of the thermocouples.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "exposure_efd",
        sa.Column(
            "mt_m2_temperature_ring6",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Mean median temperature on ring6 (LG3-3 A2/A3 OUTER) thermocouple on M2. See M2 documentation for a map of the thermocouples.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "exposure_efd",
        sa.Column(
            "mt_m2_temperature_ring7",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Mean median temperature on ring7 (LG3-4 A2/A3 OD) thermocouple on M2. See M2 documentation for a map of the thermocouples.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "exposure_efd",
        sa.Column(
            "mt_m2_temperature_ring8",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Mean median temperature on ring8 (LG4-1 A4 OUTER) thermocouple on M2. See M2 documentation for a map of the thermocouples.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "exposure_efd",
        sa.Column(
            "mt_m2_temperature_ring9",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Mean median temperature on ring9 (LG4-2 A4 OD) thermocouple on M2. See M2 documentation for a map of the thermocouples.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "exposure_efd",
        sa.Column(
            "mt_m2_temperature_ring10",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Mean median temperature on ring10 (LG4-3 A5/A6 OUTER) thermocouple on M2. See M2 documentation for a map of the thermocouples.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "exposure_efd",
        sa.Column(
            "mt_m2_temperature_ring11",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Mean median temperature on ring11 (LG4-4 A5/A6 INNER) thermocouple on M2. See M2 documentation for a map of the thermocouples.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "exposure_efd",
        sa.Column(
            "mt_ringss_fwhm_free",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Mean RINGSS free seeing full width half maximum.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "exposure_efd",
        sa.Column(
            "mt_ringss_fwhm_scintillation",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Mean RINGSS scintillation seeing full width half maximum.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "exposure_efd",
        sa.Column(
            "mt_ringss_fwhm_sector",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Mean RINGSS sector seeing full width half maximum.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "exposure_efd",
        sa.Column(
            "camera_hexapod_compensation_offset_u",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Camera Hexapod compensation offset (LUT) mean U angle.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "exposure_efd",
        sa.Column(
            "camera_hexapod_compensation_offset_v",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Camera Hexapod compensation offset (LUT) mean V angle.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "exposure_efd",
        sa.Column(
            "camera_hexapod_compensation_offset_w",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Camera Hexapod compensation offset (LUT) mean W angle.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "exposure_efd",
        sa.Column(
            "camera_hexapod_compensation_offset_x",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Camera Hexapod compensation offset (LUT) mean X position.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "exposure_efd",
        sa.Column(
            "camera_hexapod_compensation_offset_y",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Camera Hexapod compensation offset (LUT) mean Y position.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "exposure_efd",
        sa.Column(
            "camera_hexapod_compensation_offset_z",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Camera Hexapod compensation offset (LUT) mean Z position.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "exposure_efd",
        sa.Column(
            "m2_hexapod_compensation_offset_u",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="M2 Hexapod compensation offset (LUT) mean U angle.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "exposure_efd",
        sa.Column(
            "m2_hexapod_compensation_offset_v",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="M2 Hexapod compensation offset (LUT) mean V angle.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "exposure_efd",
        sa.Column(
            "m2_hexapod_compensation_offset_w",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="M2 Hexapod compensation offset (LUT) mean W angle.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "exposure_efd",
        sa.Column(
            "m2_hexapod_compensation_offset_x",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="M2 Hexapod compensation offset (LUT) mean X position.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "exposure_efd",
        sa.Column(
            "m2_hexapod_compensation_offset_y",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="M2 Hexapod compensation offset (LUT) mean Y position.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "exposure_efd",
        sa.Column(
            "m2_hexapod_compensation_offset_z",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="M2 Hexapod compensation offset (LUT) mean Z position.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "visit1_efd",
        sa.Column(
            "mt_m1m3_glycol_loop_temperature_inside_cell_temp_1",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Mean median temperature inside M1M3 Cell thermocouple 1. See M1M3 documentation for a map of the thermocouples.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "visit1_efd",
        sa.Column(
            "mt_m1m3_glycol_loop_temperature_inside_cell_temp_2",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Mean median temperature inside M1M3 Cell thermocouple 2. See M1M3 documentation for a map of the thermocouples.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "visit1_efd",
        sa.Column(
            "mt_m1m3_glycol_loop_temperature_inside_cell_temp_3",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Mean median temperature inside M1M3 Cell thermocouple 3. See M1M3 documentation for a map of the thermocouples.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "visit1_efd",
        sa.Column(
            "mt_m1m3_glycol_loop_temperature_above_mirror_temp",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Mean median temperature above mirror M1M3. See M1M3 documentation for a map of the thermocouples.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "visit1_efd",
        sa.Column(
            "mt_m2_temperature_ring0",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Mean median temperature on ring0 (LG2-1 A5/A6 OD) thermocouple on M2. See M2 documentation for a map of the thermocouples.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "visit1_efd",
        sa.Column(
            "mt_m2_temperature_ring1",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Mean median temperature on ring1 (LG2-2 A1 INNER) thermocouple on M2. See M2 documentation for a map of the thermocouples.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "visit1_efd",
        sa.Column(
            "mt_m2_temperature_ring2",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Mean median temperature on ring2 (LG2-3 A1 OUTER) thermocouple on M2. See M2 documentation for a map of the thermocouples.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "visit1_efd",
        sa.Column(
            "mt_m2_temperature_ring3",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Mean median temperature on ring3 (LG2-4 A1 OD) thermocouple on M2. See M2 documentation for a map of the thermocouples.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "visit1_efd",
        sa.Column(
            "mt_m2_temperature_ring4",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Mean median temperature on ring4 (LG3-1 A4 INNER) thermocouple on M2. See M2 documentation for a map of the thermocouples.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "visit1_efd",
        sa.Column(
            "mt_m2_temperature_ring5",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Mean median temperature on ring5 (LG3-2 A2/A3 INNER (not mounted)) thermocouple on M2. See M2 documentation for a map of the thermocouples.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "visit1_efd",
        sa.Column(
            "mt_m2_temperature_ring6",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Mean median temperature on ring6 (LG3-3 A2/A3 OUTER) thermocouple on M2. See M2 documentation for a map of the thermocouples.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "visit1_efd",
        sa.Column(
            "mt_m2_temperature_ring7",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Mean median temperature on ring7 (LG3-4 A2/A3 OD) thermocouple on M2. See M2 documentation for a map of the thermocouples.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "visit1_efd",
        sa.Column(
            "mt_m2_temperature_ring8",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Mean median temperature on ring8 (LG4-1 A4 OUTER) thermocouple on M2. See M2 documentation for a map of the thermocouples.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "visit1_efd",
        sa.Column(
            "mt_m2_temperature_ring9",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Mean median temperature on ring9 (LG4-2 A4 OD) thermocouple on M2. See M2 documentation for a map of the thermocouples.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "visit1_efd",
        sa.Column(
            "mt_m2_temperature_ring10",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Mean median temperature on ring10 (LG4-3 A5/A6 OUTER) thermocouple on M2. See M2 documentation for a map of the thermocouples.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "visit1_efd",
        sa.Column(
            "mt_m2_temperature_ring11",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Mean median temperature on ring11 (LG4-4 A5/A6 INNER) thermocouple on M2. See M2 documentation for a map of the thermocouples.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "visit1_efd",
        sa.Column(
            "mt_ringss_fwhm_free",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Mean RINGSS free seeing full width half maximum.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "visit1_efd",
        sa.Column(
            "mt_ringss_fwhm_scintillation",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Mean RINGSS scintillation seeing full width half maximum.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "visit1_efd",
        sa.Column(
            "mt_ringss_fwhm_sector",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Mean RINGSS sector seeing full width half maximum.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "visit1_efd",
        sa.Column(
            "camera_hexapod_compensation_offset_u",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Camera Hexapod compensation offset (LUT) mean U angle.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "visit1_efd",
        sa.Column(
            "camera_hexapod_compensation_offset_v",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Camera Hexapod compensation offset (LUT) mean V angle.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "visit1_efd",
        sa.Column(
            "camera_hexapod_compensation_offset_w",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Camera Hexapod compensation offset (LUT) mean W angle.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "visit1_efd",
        sa.Column(
            "camera_hexapod_compensation_offset_x",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Camera Hexapod compensation offset (LUT) mean X position.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "visit1_efd",
        sa.Column(
            "camera_hexapod_compensation_offset_y",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Camera Hexapod compensation offset (LUT) mean Y position.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "visit1_efd",
        sa.Column(
            "camera_hexapod_compensation_offset_z",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Camera Hexapod compensation offset (LUT) mean Z position.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "visit1_efd",
        sa.Column(
            "m2_hexapod_compensation_offset_u",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="M2 Hexapod compensation offset (LUT) mean U angle.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "visit1_efd",
        sa.Column(
            "m2_hexapod_compensation_offset_v",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="M2 Hexapod compensation offset (LUT) mean V angle.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "visit1_efd",
        sa.Column(
            "m2_hexapod_compensation_offset_w",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="M2 Hexapod compensation offset (LUT) mean W angle.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "visit1_efd",
        sa.Column(
            "m2_hexapod_compensation_offset_x",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="M2 Hexapod compensation offset (LUT) mean X position.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "visit1_efd",
        sa.Column(
            "m2_hexapod_compensation_offset_y",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="M2 Hexapod compensation offset (LUT) mean Y position.",
        ),
        schema="efd2_lsstcomcam",
    )
    op.add_column(
        "visit1_efd",
        sa.Column(
            "m2_hexapod_compensation_offset_z",
            sa.FLOAT().with_variant(mysql.FLOAT(), "mysql").with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="M2 Hexapod compensation offset (LUT) mean Z position.",
        ),
        schema="efd2_lsstcomcam",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("visit1_efd", "m2_hexapod_compensation_offset_z", schema="efd2_lsstcomcam")
    op.drop_column("visit1_efd", "m2_hexapod_compensation_offset_y", schema="efd2_lsstcomcam")
    op.drop_column("visit1_efd", "m2_hexapod_compensation_offset_x", schema="efd2_lsstcomcam")
    op.drop_column("visit1_efd", "m2_hexapod_compensation_offset_w", schema="efd2_lsstcomcam")
    op.drop_column("visit1_efd", "m2_hexapod_compensation_offset_v", schema="efd2_lsstcomcam")
    op.drop_column("visit1_efd", "m2_hexapod_compensation_offset_u", schema="efd2_lsstcomcam")
    op.drop_column("visit1_efd", "camera_hexapod_compensation_offset_z", schema="efd2_lsstcomcam")
    op.drop_column("visit1_efd", "camera_hexapod_compensation_offset_y", schema="efd2_lsstcomcam")
    op.drop_column("visit1_efd", "camera_hexapod_compensation_offset_x", schema="efd2_lsstcomcam")
    op.drop_column("visit1_efd", "camera_hexapod_compensation_offset_w", schema="efd2_lsstcomcam")
    op.drop_column("visit1_efd", "camera_hexapod_compensation_offset_v", schema="efd2_lsstcomcam")
    op.drop_column("visit1_efd", "camera_hexapod_compensation_offset_u", schema="efd2_lsstcomcam")
    op.drop_column("visit1_efd", "mt_ringss_fwhm_sector", schema="efd2_lsstcomcam")
    op.drop_column("visit1_efd", "mt_ringss_fwhm_scintillation", schema="efd2_lsstcomcam")
    op.drop_column("visit1_efd", "mt_ringss_fwhm_free", schema="efd2_lsstcomcam")
    op.drop_column("visit1_efd", "mt_m2_temperature_ring11", schema="efd2_lsstcomcam")
    op.drop_column("visit1_efd", "mt_m2_temperature_ring10", schema="efd2_lsstcomcam")
    op.drop_column("visit1_efd", "mt_m2_temperature_ring9", schema="efd2_lsstcomcam")
    op.drop_column("visit1_efd", "mt_m2_temperature_ring8", schema="efd2_lsstcomcam")
    op.drop_column("visit1_efd", "mt_m2_temperature_ring7", schema="efd2_lsstcomcam")
    op.drop_column("visit1_efd", "mt_m2_temperature_ring6", schema="efd2_lsstcomcam")
    op.drop_column("visit1_efd", "mt_m2_temperature_ring5", schema="efd2_lsstcomcam")
    op.drop_column("visit1_efd", "mt_m2_temperature_ring4", schema="efd2_lsstcomcam")
    op.drop_column("visit1_efd", "mt_m2_temperature_ring3", schema="efd2_lsstcomcam")
    op.drop_column("visit1_efd", "mt_m2_temperature_ring2", schema="efd2_lsstcomcam")
    op.drop_column("visit1_efd", "mt_m2_temperature_ring1", schema="efd2_lsstcomcam")
    op.drop_column("visit1_efd", "mt_m2_temperature_ring0", schema="efd2_lsstcomcam")
    op.drop_column(
        "visit1_efd", "mt_m1m3_glycol_loop_temperature_above_mirror_temp", schema="efd2_lsstcomcam"
    )
    op.drop_column(
        "visit1_efd", "mt_m1m3_glycol_loop_temperature_inside_cell_temp_3", schema="efd2_lsstcomcam"
    )
    op.drop_column(
        "visit1_efd", "mt_m1m3_glycol_loop_temperature_inside_cell_temp_2", schema="efd2_lsstcomcam"
    )
    op.drop_column(
        "visit1_efd", "mt_m1m3_glycol_loop_temperature_inside_cell_temp_1", schema="efd2_lsstcomcam"
    )
    op.drop_column("exposure_efd", "m2_hexapod_compensation_offset_z", schema="efd2_lsstcomcam")
    op.drop_column("exposure_efd", "m2_hexapod_compensation_offset_y", schema="efd2_lsstcomcam")
    op.drop_column("exposure_efd", "m2_hexapod_compensation_offset_x", schema="efd2_lsstcomcam")
    op.drop_column("exposure_efd", "m2_hexapod_compensation_offset_w", schema="efd2_lsstcomcam")
    op.drop_column("exposure_efd", "m2_hexapod_compensation_offset_v", schema="efd2_lsstcomcam")
    op.drop_column("exposure_efd", "m2_hexapod_compensation_offset_u", schema="efd2_lsstcomcam")
    op.drop_column("exposure_efd", "camera_hexapod_compensation_offset_z", schema="efd2_lsstcomcam")
    op.drop_column("exposure_efd", "camera_hexapod_compensation_offset_y", schema="efd2_lsstcomcam")
    op.drop_column("exposure_efd", "camera_hexapod_compensation_offset_x", schema="efd2_lsstcomcam")
    op.drop_column("exposure_efd", "camera_hexapod_compensation_offset_w", schema="efd2_lsstcomcam")
    op.drop_column("exposure_efd", "camera_hexapod_compensation_offset_v", schema="efd2_lsstcomcam")
    op.drop_column("exposure_efd", "camera_hexapod_compensation_offset_u", schema="efd2_lsstcomcam")
    op.drop_column("exposure_efd", "mt_ringss_fwhm_sector", schema="efd2_lsstcomcam")
    op.drop_column("exposure_efd", "mt_ringss_fwhm_scintillation", schema="efd2_lsstcomcam")
    op.drop_column("exposure_efd", "mt_ringss_fwhm_free", schema="efd2_lsstcomcam")
    op.drop_column("exposure_efd", "mt_m2_temperature_ring11", schema="efd2_lsstcomcam")
    op.drop_column("exposure_efd", "mt_m2_temperature_ring10", schema="efd2_lsstcomcam")
    op.drop_column("exposure_efd", "mt_m2_temperature_ring9", schema="efd2_lsstcomcam")
    op.drop_column("exposure_efd", "mt_m2_temperature_ring8", schema="efd2_lsstcomcam")
    op.drop_column("exposure_efd", "mt_m2_temperature_ring7", schema="efd2_lsstcomcam")
    op.drop_column("exposure_efd", "mt_m2_temperature_ring6", schema="efd2_lsstcomcam")
    op.drop_column("exposure_efd", "mt_m2_temperature_ring5", schema="efd2_lsstcomcam")
    op.drop_column("exposure_efd", "mt_m2_temperature_ring4", schema="efd2_lsstcomcam")
    op.drop_column("exposure_efd", "mt_m2_temperature_ring3", schema="efd2_lsstcomcam")
    op.drop_column("exposure_efd", "mt_m2_temperature_ring2", schema="efd2_lsstcomcam")
    op.drop_column("exposure_efd", "mt_m2_temperature_ring1", schema="efd2_lsstcomcam")
    op.drop_column("exposure_efd", "mt_m2_temperature_ring0", schema="efd2_lsstcomcam")
    op.drop_column(
        "exposure_efd", "mt_m1m3_glycol_loop_temperature_above_mirror_temp", schema="efd2_lsstcomcam"
    )
    op.drop_column(
        "exposure_efd", "mt_m1m3_glycol_loop_temperature_inside_cell_temp_3", schema="efd2_lsstcomcam"
    )
    op.drop_column(
        "exposure_efd", "mt_m1m3_glycol_loop_temperature_inside_cell_temp_2", schema="efd2_lsstcomcam"
    )
    op.drop_column(
        "exposure_efd", "mt_m1m3_glycol_loop_temperature_inside_cell_temp_1", schema="efd2_lsstcomcam"
    )
    # ### end Alembic commands ###
