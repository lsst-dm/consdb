"""add visit and ccdvisit

Revision ID: da2d84e3d50f
Revises: 71cb8cb12098
Create Date: 2024-05-28 05:59:43.278521+00:00

"""

from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import mysql, oracle

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "da2d84e3d50f"
down_revision: Union[str, None] = "71cb8cb12098"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "visit1_quicklook",
        sa.Column(
            "visit_id",
            sa.BIGINT()
            .with_variant(mysql.BIGINT(), "mysql")
            .with_variant(oracle.NUMBER(precision=38, scale=0, asdecimal=False), "oracle")
            .with_variant(sa.BIGINT(), "postgresql"),
            nullable=False,
            comment="Unique identifier.",
        ),
        sa.Column(
            "astrom_offset_mean_min",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Mean offset of astrometric calibration matches (minimum across all detectors).",
        ),
        sa.Column(
            "astrom_offset_mean_max",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Mean offset of astrometric calibration matches (maximum across all detectors).",
        ),
        sa.Column(
            "astrom_offset_mean_median",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Mean offset of astrometric calibration matches (median across all detectors).",
        ),
        sa.Column(
            "astrom_offset_std_min",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Standard deviation of offsets of astrometric calibration matches (minimum across all detectors).",
        ),
        sa.Column(
            "astrom_offset_std_max",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Standard deviation of offsets of astrometric calibration matches (maximum across all detectors).",
        ),
        sa.Column(
            "astrom_offset_std_median",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Standard deviation of offsets of astrometric calibration matches (median across all detectors).",
        ),
        sa.Column(
            "eff_time_min",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Effective exposure time (minimum across all detectors).",
        ),
        sa.Column(
            "eff_time_max",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Effective exposure time (maximum across all detectors).",
        ),
        sa.Column(
            "eff_time_median",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Effective exposure time (median across all detectors).",
        ),
        sa.Column(
            "eff_time_psf_sigma_scale_min",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Eff time PSF sigma scale (minimum across all detectors).",
        ),
        sa.Column(
            "eff_time_psf_sigma_scale_max",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Eff time PSF sigma scale (maximum across all detectors).",
        ),
        sa.Column(
            "eff_time_psf_sigma_scale_median",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Eff time PSF sigma scale (median across all detectors).",
        ),
        sa.Column(
            "eff_time_sky_bg_scale_min",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Eff time sky background scale (minimum across all detectors).",
        ),
        sa.Column(
            "eff_time_sky_bg_scale_max",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Eff time sky background scale (maximum across all detectors).",
        ),
        sa.Column(
            "eff_time_sky_bg_scale_median",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Eff time sky background scale (median across all detectors).",
        ),
        sa.Column(
            "eff_time_zero_point_scale_min",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Eff time zero point scale (minimum across all detectors).",
        ),
        sa.Column(
            "eff_time_zero_point_scale_max",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Eff time zero point scale (maximum across all detectors).",
        ),
        sa.Column(
            "eff_time_zero_point_scale_median",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Eff time zero point scale (median across all detectors).",
        ),
        sa.Column(
            "max_dist_to_nearest_psf_min",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Maximum distance of an unmasked pixel to its nearest model PSF star (minimum across all detectors).",
        ),
        sa.Column(
            "max_dist_to_nearest_psf_max",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Maximum distance of an unmasked pixel to its nearest model PSF star (maximum across all detectors).",
        ),
        sa.Column(
            "max_dist_to_nearest_psf_median",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Maximum distance of an unmasked pixel to its nearest model PSF star (median across all detectors).",
        ),
        sa.Column(
            "mean_var_min",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Mean var (minimum across all detectors).",
        ),
        sa.Column(
            "mean_var_max",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Mean var (maximum across all detectors).",
        ),
        sa.Column(
            "mean_var_median",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Mean var (median across all detectors).",
        ),
        sa.Column(
            "n_psf_star_min",
            sa.INTEGER().with_variant(mysql.INTEGER(), "mysql").with_variant(sa.INTEGER(), "postgresql"),
            nullable=True,
            comment="Number of stars used for PSF model (minimum across all detectors).",
        ),
        sa.Column(
            "n_psf_star_max",
            sa.INTEGER().with_variant(mysql.INTEGER(), "mysql").with_variant(sa.INTEGER(), "postgresql"),
            nullable=True,
            comment="Number of stars used for PSF model (maximum across all detectors).",
        ),
        sa.Column(
            "n_psf_star_median",
            sa.INTEGER().with_variant(mysql.INTEGER(), "mysql").with_variant(sa.INTEGER(), "postgresql"),
            nullable=True,
            comment="Number of stars used for PSF model (median across all detectors).",
        ),
        sa.Column(
            "n_psf_star_total",
            sa.INTEGER().with_variant(mysql.INTEGER(), "mysql").with_variant(sa.INTEGER(), "postgresql"),
            nullable=True,
            comment="Number of stars used for PSF model (total across all detectors).",
        ),
        sa.Column(
            "psf_area_min",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="PSF area (minimum across all detectors).",
        ),
        sa.Column(
            "psf_area_max",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="PSF area (maximum across all detectors).",
        ),
        sa.Column(
            "psf_area_median",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="PSF area (median across all detectors).",
        ),
        sa.Column(
            "psf_ixx_min",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="PSF Ixx moment (minimum across all detectors).",
        ),
        sa.Column(
            "psf_ixx_max",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="PSF Ixx moment (maximum across all detectors).",
        ),
        sa.Column(
            "psf_ixx_median",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="PSF Ixx moment (median across all detectors).",
        ),
        sa.Column(
            "psf_ixy_min",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="PSF Ixy moment (minimum across all detectors).",
        ),
        sa.Column(
            "psf_ixy_max",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="PSF Ixy moment (maximum across all detectors).",
        ),
        sa.Column(
            "psf_ixy_median",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="PSF Ixy moment (median across all detectors).",
        ),
        sa.Column(
            "psf_iyy_min",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="PSF Iyy moment (minimum across all detectors).",
        ),
        sa.Column(
            "psf_iyy_max",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="PSF Iyy moment (maximum across all detectors).",
        ),
        sa.Column(
            "psf_iyy_median",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="PSF Iyy moment (median across all detectors).",
        ),
        sa.Column(
            "psf_sigma_min",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="PSF sigma (minimum across all detectors).",
        ),
        sa.Column(
            "psf_sigma_max",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="PSF sigma (maximum across all detectors).",
        ),
        sa.Column(
            "psf_sigma_median",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="PSF sigma (median across all detectors).",
        ),
        sa.Column(
            "psf_star_delta_e1_median_min",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Median E1 residual (starE1 - psfE1) for PSF stars (minimum across all detectors).",
        ),
        sa.Column(
            "psf_star_delta_e1_median_max",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Median E1 residual (starE1 - psfE1) for PSF stars (maximum across all detectors).",
        ),
        sa.Column(
            "psf_star_delta_e1_median_median",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Median E1 residual (starE1 - psfE1) for PSF stars (median across all detectors).",
        ),
        sa.Column(
            "psf_star_delta_e1_scatter_min",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Scatter (via MAD) of E1 residual (starE1 - psfE1) for PSF stars (minimum across all detectors).",
        ),
        sa.Column(
            "psf_star_delta_e1_scatter_max",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Scatter (via MAD) of E1 residual (starE1 - psfE1) for PSF stars (maximum across all detectors).",
        ),
        sa.Column(
            "psf_star_delta_e1_scatter_median",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Scatter (via MAD) of E1 residual (starE1 - psfE1) for PSF stars (median across all detectors).",
        ),
        sa.Column(
            "psf_star_delta_e2_median_min",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Median E2 residual (starE2 - psfE2) for PSF stars (minimum across all detectors).",
        ),
        sa.Column(
            "psf_star_delta_e2_median_max",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Median E2 residual (starE2 - psfE2) for PSF stars (maximum across all detectors).",
        ),
        sa.Column(
            "psf_star_delta_e2_median_median",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Median E2 residual (starE2 - psfE2) for PSF stars (median across all detectors).",
        ),
        sa.Column(
            "psf_star_delta_e2_scatter_min",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Scatter (via MAD) of E2 residual (starE2 - psfE2) for PSF stars (minimum across all detectors).",
        ),
        sa.Column(
            "psf_star_delta_e2_scatter_max",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Scatter (via MAD) of E2 residual (starE2 - psfE2) for PSF stars (maximum across all detectors).",
        ),
        sa.Column(
            "psf_star_delta_e2_scatter_median",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Scatter (via MAD) of E2 residual (starE2 - psfE2) for PSF stars (median across all detectors).",
        ),
        sa.Column(
            "psf_star_delta_size_median_min",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Median size residual (starSize - psfSize) for PSF stars (minimum across all detectors).",
        ),
        sa.Column(
            "psf_star_delta_size_median_max",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Median size residual (starSize - psfSize) for PSF stars (maximum across all detectors).",
        ),
        sa.Column(
            "psf_star_delta_size_median_median",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Median size residual (starSize - psfSize) for PSF stars (median across all detectors).",
        ),
        sa.Column(
            "psf_star_delta_size_scatter_min",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Scatter (via MAD) of size residual (starSize - psfSize) for stars (minimum across all detectors).",
        ),
        sa.Column(
            "psf_star_delta_size_scatter_max",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Scatter (via MAD) of size residual (starSize - psfSize) for stars (maximum across all detectors).",
        ),
        sa.Column(
            "psf_star_delta_size_scatter_median",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Scatter (via MAD) of size residual (starSize - psfSize) for stars (median across all detectors).",
        ),
        sa.Column(
            "psf_star_scaled_delta_size_scatter_min",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Scatter (via MAD) of size residual scaled by median size squared (minimum across all detectors).",
        ),
        sa.Column(
            "psf_star_scaled_delta_size_scatter_max",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Scatter (via MAD) of size residual scaled by median size squared (maximum across all detectors).",
        ),
        sa.Column(
            "psf_star_scaled_delta_size_scatter_median",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Scatter (via MAD) of size residual scaled by median size squared (median across all detectors).",
        ),
        sa.Column(
            "psf_trace_radius_delta_min",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Delta (max - min) of model PSF trace radius values evaluated on a grid of unmasked pixels (minimum across all detectors).",
        ),
        sa.Column(
            "psf_trace_radius_delta_max",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Delta (max - min) of model PSF trace radius values evaluated on a grid of unmasked pixels (maximum across all detectors).",
        ),
        sa.Column(
            "psf_trace_radius_delta_median",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Delta (max - min) of model PSF trace radius values evaluated on a grid of unmasked pixels (median across all detectors).",
        ),
        sa.Column(
            "sky_bg_min",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Average sky background (minimum across all detectors).",
        ),
        sa.Column(
            "sky_bg_max",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Average sky background (maximum across all detectors).",
        ),
        sa.Column(
            "sky_bg_median",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Average sky background (median across all detectors).",
        ),
        sa.Column(
            "sky_noise_min",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="RMS noise of the sky background (minimum across all detectors).",
        ),
        sa.Column(
            "sky_noise_max",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="RMS noise of the sky background (maximum across all detectors).",
        ),
        sa.Column(
            "sky_noise_median",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="RMS noise of the sky background (median across all detectors).",
        ),
        sa.Column(
            "zero_point_min",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Photometric zero point (minimum across all detectors).",
        ),
        sa.Column(
            "zero_point_max",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Photometric zero point (maximum across all detectors).",
        ),
        sa.Column(
            "zero_point_median",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Photometric zero point (median across all detectors).",
        ),
        sa.Column(
            "low_snr_source_count_min",
            sa.INTEGER().with_variant(mysql.INTEGER(), "mysql").with_variant(sa.INTEGER(), "postgresql"),
            nullable=True,
            comment="Count of low signal-to-noise-ratio sources (minimum across all detectors).",
        ),
        sa.Column(
            "low_snr_source_count_max",
            sa.INTEGER().with_variant(mysql.INTEGER(), "mysql").with_variant(sa.INTEGER(), "postgresql"),
            nullable=True,
            comment="Count of low signal-to-noise-ratio sources (maximum across all detectors).",
        ),
        sa.Column(
            "low_snr_source_count_median",
            sa.INTEGER().with_variant(mysql.INTEGER(), "mysql").with_variant(sa.INTEGER(), "postgresql"),
            nullable=True,
            comment="Count of low signal-to-noise-ratio sources (median across all detectors).",
        ),
        sa.Column(
            "low_snr_source_count_total",
            sa.INTEGER().with_variant(mysql.INTEGER(), "mysql").with_variant(sa.INTEGER(), "postgresql"),
            nullable=True,
            comment="Count of low signal-to-noise-ratio sources (total across all detectors).",
        ),
        sa.Column(
            "high_snr_source_count_min",
            sa.INTEGER().with_variant(mysql.INTEGER(), "mysql").with_variant(sa.INTEGER(), "postgresql"),
            nullable=True,
            comment="Count of high signal-to-noise-ratio sources (minimum across all detectors).",
        ),
        sa.Column(
            "high_snr_source_count_max",
            sa.INTEGER().with_variant(mysql.INTEGER(), "mysql").with_variant(sa.INTEGER(), "postgresql"),
            nullable=True,
            comment="Count of high signal-to-noise-ratio sources (maximum across all detectors).",
        ),
        sa.Column(
            "high_snr_source_count_median",
            sa.INTEGER().with_variant(mysql.INTEGER(), "mysql").with_variant(sa.INTEGER(), "postgresql"),
            nullable=True,
            comment="Count of high signal-to-noise-ratio sources (median across all detectors).",
        ),
        sa.Column(
            "high_snr_source_count_total",
            sa.INTEGER().with_variant(mysql.INTEGER(), "mysql").with_variant(sa.INTEGER(), "postgresql"),
            nullable=True,
            comment="Count of high signal-to-noise-ratio sources (total across all detectors).",
        ),
        sa.ForeignKeyConstraint(["visit_id"], ["cdb_lsstcomcamsim.exposure.exposure_id"], name="fk_obs_id"),
        sa.PrimaryKeyConstraint("visit_id"),
        schema="cdb_lsstcomcamsim",
    )
    op.create_table(
        "ccdvisit1_quicklook",
        sa.Column(
            "ccdvisit_id",
            sa.BIGINT()
            .with_variant(mysql.BIGINT(), "mysql")
            .with_variant(oracle.NUMBER(precision=38, scale=0, asdecimal=False), "oracle")
            .with_variant(sa.BIGINT(), "postgresql"),
            nullable=False,
            comment="Unique identifier.",
        ),
        sa.Column(
            "s_ra",
            sa.DOUBLE()
            .with_variant(mysql.DOUBLE(asdecimal=True), "mysql")
            .with_variant(oracle.BINARY_DOUBLE(), "oracle")
            .with_variant(sa.DOUBLE_PRECISION(), "postgresql"),
            nullable=True,
            comment="Central Spatial Position in ICRS; Computed right ascension of CCD center.",
        ),
        sa.Column(
            "s_dec",
            sa.DOUBLE()
            .with_variant(mysql.DOUBLE(asdecimal=True), "mysql")
            .with_variant(oracle.BINARY_DOUBLE(), "oracle")
            .with_variant(sa.DOUBLE_PRECISION(), "postgresql"),
            nullable=True,
            comment="Central Spatial Position in ICRS; Computed declination of CCD center.",
        ),
        sa.Column(
            "zenith_distance",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Zenith distance at observation mid-point.",
        ),
        sa.Column(
            "photometric_calib",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Conversion from DN to nanojansky for CCD.",
        ),
        sa.Column(
            "psf_sigma",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="PSF model second-moments determinant radius (center of chip).",
        ),
        sa.Column(
            "sky_bg",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="Average sky background.",
        ),
        sa.Column(
            "sky_noise",
            sa.FLOAT()
            .with_variant(mysql.FLOAT(), "mysql")
            .with_variant(oracle.BINARY_FLOAT(), "oracle")
            .with_variant(sa.FLOAT(), "postgresql"),
            nullable=True,
            comment="RMS noise of the sky background.",
        ),
        sa.Column(
            "seeing",
            sa.DOUBLE()
            .with_variant(mysql.DOUBLE(asdecimal=True), "mysql")
            .with_variant(oracle.BINARY_DOUBLE(), "oracle")
            .with_variant(sa.DOUBLE_PRECISION(), "postgresql"),
            nullable=True,
            comment="Mean measured FWHM of the PSF.",
        ),
        sa.Column(
            "astrom_offset_mean",
            sa.DOUBLE()
            .with_variant(mysql.DOUBLE(asdecimal=True), "mysql")
            .with_variant(oracle.BINARY_DOUBLE(), "oracle")
            .with_variant(sa.DOUBLE_PRECISION(), "postgresql"),
            nullable=True,
            comment="Mean offset of astrometric calibration matches.",
        ),
        sa.Column(
            "astrom_offset_std",
            sa.DOUBLE()
            .with_variant(mysql.DOUBLE(asdecimal=True), "mysql")
            .with_variant(oracle.BINARY_DOUBLE(), "oracle")
            .with_variant(sa.DOUBLE_PRECISION(), "postgresql"),
            nullable=True,
            comment="Standard deviation of offsets of astrometric calibration matches.",
        ),
        sa.Column(
            "n_psf_star",
            sa.INTEGER().with_variant(mysql.INTEGER(), "mysql").with_variant(sa.INTEGER(), "postgresql"),
            nullable=True,
            comment="Number of stars used for PSF model.",
        ),
        sa.Column(
            "psf_star_delta_e1_median",
            sa.DOUBLE()
            .with_variant(mysql.DOUBLE(asdecimal=True), "mysql")
            .with_variant(oracle.BINARY_DOUBLE(), "oracle")
            .with_variant(sa.DOUBLE_PRECISION(), "postgresql"),
            nullable=True,
            comment="Median E1 residual (starE1 - psfE1) for PSF stars.",
        ),
        sa.Column(
            "psf_star_delta_e2_median",
            sa.DOUBLE()
            .with_variant(mysql.DOUBLE(asdecimal=True), "mysql")
            .with_variant(oracle.BINARY_DOUBLE(), "oracle")
            .with_variant(sa.DOUBLE_PRECISION(), "postgresql"),
            nullable=True,
            comment="Median E2 residual (starE2 - psfE2) for PSF stars.",
        ),
        sa.Column(
            "psf_star_delta_e1_scatter",
            sa.DOUBLE()
            .with_variant(mysql.DOUBLE(asdecimal=True), "mysql")
            .with_variant(oracle.BINARY_DOUBLE(), "oracle")
            .with_variant(sa.DOUBLE_PRECISION(), "postgresql"),
            nullable=True,
            comment="Scatter (via MAD) of E1 residual (starE1 - psfE1) for PSF stars.",
        ),
        sa.Column(
            "psf_star_delta_e2_scatter",
            sa.DOUBLE()
            .with_variant(mysql.DOUBLE(asdecimal=True), "mysql")
            .with_variant(oracle.BINARY_DOUBLE(), "oracle")
            .with_variant(sa.DOUBLE_PRECISION(), "postgresql"),
            nullable=True,
            comment="Scatter (via MAD) of E2 residual (starE2 - psfE2) for PSF stars.",
        ),
        sa.Column(
            "psf_star_delta_size_median",
            sa.DOUBLE()
            .with_variant(mysql.DOUBLE(asdecimal=True), "mysql")
            .with_variant(oracle.BINARY_DOUBLE(), "oracle")
            .with_variant(sa.DOUBLE_PRECISION(), "postgresql"),
            nullable=True,
            comment="Median size residual (starSize - psfSize) for PSF stars.",
        ),
        sa.Column(
            "psf_star_delta_size_scatter",
            sa.DOUBLE()
            .with_variant(mysql.DOUBLE(asdecimal=True), "mysql")
            .with_variant(oracle.BINARY_DOUBLE(), "oracle")
            .with_variant(sa.DOUBLE_PRECISION(), "postgresql"),
            nullable=True,
            comment="Scatter (via MAD) of size residual (starSize - psfSize) for stars.",
        ),
        sa.Column(
            "psf_star_scaled_delta_size_scatter",
            sa.DOUBLE()
            .with_variant(mysql.DOUBLE(asdecimal=True), "mysql")
            .with_variant(oracle.BINARY_DOUBLE(), "oracle")
            .with_variant(sa.DOUBLE_PRECISION(), "postgresql"),
            nullable=True,
            comment="Scatter (via MAD) of size residual scaled by median size squared.",
        ),
        sa.Column(
            "psf_trace_radius_delta",
            sa.DOUBLE()
            .with_variant(mysql.DOUBLE(asdecimal=True), "mysql")
            .with_variant(oracle.BINARY_DOUBLE(), "oracle")
            .with_variant(sa.DOUBLE_PRECISION(), "postgresql"),
            nullable=True,
            comment="Delta (max - min) of model PSF trace radius values evaluated on a grid of unmasked pixels.",
        ),
        sa.Column(
            "max_dist_to_nearest_psf",
            sa.DOUBLE()
            .with_variant(mysql.DOUBLE(asdecimal=True), "mysql")
            .with_variant(oracle.BINARY_DOUBLE(), "oracle")
            .with_variant(sa.DOUBLE_PRECISION(), "postgresql"),
            nullable=True,
            comment="Maximum distance of an unmasked pixel to its nearest model PSF star.",
        ),
        sa.ForeignKeyConstraint(
            ["ccdvisit_id"], ["cdb_lsstcomcamsim.ccdexposure.ccdexposure_id"], name="fk_obs_id"
        ),
        sa.PrimaryKeyConstraint("ccdvisit_id"),
        schema="cdb_lsstcomcamsim",
    )
    op.alter_column(
        "exposure",
        "band",
        existing_type=sa.VARCHAR(length=32),
        comment="Name of the band used to take the exposure.  Abstract filter that is not associated with a particular instrument.",
        existing_comment="Name of the band used to take the exposure where this source was. measured. Abstract filter that is not associated with a particular instrument.",
        existing_nullable=True,
        schema="cdb_lsstcomcamsim",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "exposure",
        "band",
        existing_type=sa.VARCHAR(length=32),
        comment="Name of the band used to take the exposure where this source was. measured. Abstract filter that is not associated with a particular instrument.",
        existing_comment="Name of the band used to take the exposure.  Abstract filter that is not associated with a particular instrument.",
        existing_nullable=True,
        schema="cdb_lsstcomcamsim",
    )
    op.drop_table("ccdvisit1_quicklook", schema="cdb_lsstcomcamsim")
    op.drop_table("visit1_quicklook", schema="cdb_lsstcomcamsim")
    # ### end Alembic commands ###
