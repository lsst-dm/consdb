"""Initial migration

Revision ID: 25e0b617aab8
Revises:
Create Date: 2025-04-30 22:18:50.475973+00:00

"""

from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import mysql, postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "25e0b617aab8"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "latiss",
        sa.Column(
            "id",
            sa.INTEGER().with_variant(mysql.INTEGER(), "mysql").with_variant(sa.INTEGER(), "postgresql"),
            autoincrement=True,
            nullable=False,
            comment="Unique ID, auto-incremented",
        ),
        sa.Column(
            "start_time",
            sa.TIMESTAMP()
            .with_variant(mysql.DATETIME(), "mysql")
            .with_variant(postgresql.TIMESTAMP(), "postgresql"),
            nullable=True,
            comment="Start time of transformation interval, must be provided",
        ),
        sa.Column(
            "end_time",
            sa.TIMESTAMP()
            .with_variant(mysql.DATETIME(), "mysql")
            .with_variant(postgresql.TIMESTAMP(), "postgresql"),
            nullable=True,
            comment="End time of transformation interval, must be provided",
        ),
        sa.Column(
            "timewindow",
            sa.INTEGER().with_variant(mysql.INTEGER(), "mysql").with_variant(sa.INTEGER(), "postgresql"),
            nullable=True,
            comment="Time window to expand start/end times by (minutes)",
        ),
        sa.Column(
            "status",
            sa.CHAR(length=20)
            .with_variant(mysql.CHAR(length=20), "mysql")
            .with_variant(sa.CHAR(length=20), "postgresql"),
            server_default="pending",
            nullable=True,
            comment="Process status, default 'pending'",
        ),
        sa.Column(
            "process_start_time",
            sa.TIMESTAMP()
            .with_variant(mysql.DATETIME(), "mysql")
            .with_variant(postgresql.TIMESTAMP(), "postgresql"),
            nullable=True,
            comment="Timestamp when process started",
        ),
        sa.Column(
            "process_end_time",
            sa.TIMESTAMP()
            .with_variant(mysql.DATETIME(), "mysql")
            .with_variant(postgresql.TIMESTAMP(), "postgresql"),
            nullable=True,
            comment="Timestamp when process ended",
        ),
        sa.Column(
            "process_exec_time",
            sa.INTEGER().with_variant(mysql.INTEGER(), "mysql").with_variant(sa.INTEGER(), "postgresql"),
            server_default=sa.text("0"),
            nullable=True,
            comment="Execution time in seconds, default 0",
        ),
        sa.Column(
            "exposures",
            sa.INTEGER().with_variant(mysql.INTEGER(), "mysql").with_variant(sa.INTEGER(), "postgresql"),
            server_default=sa.text("0"),
            nullable=True,
            comment="Number of exposures processed, default 0",
        ),
        sa.Column(
            "visits1",
            sa.INTEGER().with_variant(mysql.INTEGER(), "mysql").with_variant(sa.INTEGER(), "postgresql"),
            server_default=sa.text("0"),
            nullable=True,
            comment="Number of visits recorded, default 0",
        ),
        sa.Column(
            "retries",
            sa.INTEGER().with_variant(mysql.INTEGER(), "mysql").with_variant(sa.INTEGER(), "postgresql"),
            server_default=sa.text("0"),
            nullable=True,
            comment="Number of retries attempted, default 0",
        ),
        sa.Column(
            "error",
            sa.TEXT().with_variant(mysql.LONGTEXT(), "mysql").with_variant(sa.TEXT(), "postgresql"),
            nullable=True,
            comment="Error message, if any",
        ),
        sa.Column(
            "butler_repo",
            sa.TEXT().with_variant(mysql.LONGTEXT(), "mysql").with_variant(sa.TEXT(), "postgresql"),
            nullable=True,
        ),
        sa.Column(
            "created_at",
            sa.TIMESTAMP()
            .with_variant(mysql.DATETIME(), "mysql")
            .with_variant(postgresql.TIMESTAMP(), "postgresql"),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=True,
            comment="Timestamp when record was created, default current timestamp",
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="efd_scheduler",
        comment="Scheduler for latiss.",
        mysql_engine="MyISAM",
    )
    op.create_table(
        "lsstcam",
        sa.Column(
            "id",
            sa.INTEGER().with_variant(mysql.INTEGER(), "mysql").with_variant(sa.INTEGER(), "postgresql"),
            autoincrement=True,
            nullable=False,
            comment="Unique ID, auto-incremented",
        ),
        sa.Column(
            "start_time",
            sa.TIMESTAMP()
            .with_variant(mysql.DATETIME(), "mysql")
            .with_variant(postgresql.TIMESTAMP(), "postgresql"),
            nullable=True,
            comment="Start time of transformation interval, must be provided",
        ),
        sa.Column(
            "end_time",
            sa.TIMESTAMP()
            .with_variant(mysql.DATETIME(), "mysql")
            .with_variant(postgresql.TIMESTAMP(), "postgresql"),
            nullable=True,
            comment="End time of transformation interval, must be provided",
        ),
        sa.Column(
            "timewindow",
            sa.INTEGER().with_variant(mysql.INTEGER(), "mysql").with_variant(sa.INTEGER(), "postgresql"),
            nullable=True,
            comment="Time window to expand start/end times by (minutes)",
        ),
        sa.Column(
            "status",
            sa.CHAR(length=20)
            .with_variant(mysql.CHAR(length=20), "mysql")
            .with_variant(sa.CHAR(length=20), "postgresql"),
            server_default="pending",
            nullable=True,
            comment="Process status, default 'pending'",
        ),
        sa.Column(
            "process_start_time",
            sa.TIMESTAMP()
            .with_variant(mysql.DATETIME(), "mysql")
            .with_variant(postgresql.TIMESTAMP(), "postgresql"),
            nullable=True,
            comment="Timestamp when process started",
        ),
        sa.Column(
            "process_end_time",
            sa.TIMESTAMP()
            .with_variant(mysql.DATETIME(), "mysql")
            .with_variant(postgresql.TIMESTAMP(), "postgresql"),
            nullable=True,
            comment="Timestamp when process ended",
        ),
        sa.Column(
            "process_exec_time",
            sa.INTEGER().with_variant(mysql.INTEGER(), "mysql").with_variant(sa.INTEGER(), "postgresql"),
            server_default=sa.text("0"),
            nullable=True,
            comment="Execution time in seconds, default 0",
        ),
        sa.Column(
            "exposures",
            sa.INTEGER().with_variant(mysql.INTEGER(), "mysql").with_variant(sa.INTEGER(), "postgresql"),
            server_default=sa.text("0"),
            nullable=True,
            comment="Number of exposures processed, default 0",
        ),
        sa.Column(
            "visits1",
            sa.INTEGER().with_variant(mysql.INTEGER(), "mysql").with_variant(sa.INTEGER(), "postgresql"),
            server_default=sa.text("0"),
            nullable=True,
            comment="Number of visits recorded, default 0",
        ),
        sa.Column(
            "retries",
            sa.INTEGER().with_variant(mysql.INTEGER(), "mysql").with_variant(sa.INTEGER(), "postgresql"),
            server_default=sa.text("0"),
            nullable=True,
            comment="Number of retries attempted, default 0",
        ),
        sa.Column(
            "error",
            sa.TEXT().with_variant(mysql.LONGTEXT(), "mysql").with_variant(sa.TEXT(), "postgresql"),
            nullable=True,
            comment="Error message, if any",
        ),
        sa.Column(
            "butler_repo",
            sa.TEXT().with_variant(mysql.LONGTEXT(), "mysql").with_variant(sa.TEXT(), "postgresql"),
            nullable=True,
        ),
        sa.Column(
            "created_at",
            sa.TIMESTAMP()
            .with_variant(mysql.DATETIME(), "mysql")
            .with_variant(postgresql.TIMESTAMP(), "postgresql"),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=True,
            comment="Timestamp when record was created, default current timestamp",
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="efd_scheduler",
        comment="Scheduler for lsstcam.",
        mysql_engine="MyISAM",
    )
    op.create_table(
        "lsstcomcam",
        sa.Column(
            "id",
            sa.INTEGER().with_variant(mysql.INTEGER(), "mysql").with_variant(sa.INTEGER(), "postgresql"),
            autoincrement=True,
            nullable=False,
            comment="Unique ID, auto-incremented",
        ),
        sa.Column(
            "start_time",
            sa.TIMESTAMP()
            .with_variant(mysql.DATETIME(), "mysql")
            .with_variant(postgresql.TIMESTAMP(), "postgresql"),
            nullable=True,
            comment="Start time of transformation interval, must be provided",
        ),
        sa.Column(
            "end_time",
            sa.TIMESTAMP()
            .with_variant(mysql.DATETIME(), "mysql")
            .with_variant(postgresql.TIMESTAMP(), "postgresql"),
            nullable=True,
            comment="End time of transformation interval, must be provided",
        ),
        sa.Column(
            "timewindow",
            sa.INTEGER().with_variant(mysql.INTEGER(), "mysql").with_variant(sa.INTEGER(), "postgresql"),
            nullable=True,
            comment="Time window to expand start/end times by (minutes)",
        ),
        sa.Column(
            "status",
            sa.CHAR(length=20)
            .with_variant(mysql.CHAR(length=20), "mysql")
            .with_variant(sa.CHAR(length=20), "postgresql"),
            server_default="pending",
            nullable=True,
            comment="Process status, default 'pending'",
        ),
        sa.Column(
            "process_start_time",
            sa.TIMESTAMP()
            .with_variant(mysql.DATETIME(), "mysql")
            .with_variant(postgresql.TIMESTAMP(), "postgresql"),
            nullable=True,
            comment="Timestamp when process started",
        ),
        sa.Column(
            "process_end_time",
            sa.TIMESTAMP()
            .with_variant(mysql.DATETIME(), "mysql")
            .with_variant(postgresql.TIMESTAMP(), "postgresql"),
            nullable=True,
            comment="Timestamp when process ended",
        ),
        sa.Column(
            "process_exec_time",
            sa.INTEGER().with_variant(mysql.INTEGER(), "mysql").with_variant(sa.INTEGER(), "postgresql"),
            server_default=sa.text("0"),
            nullable=True,
            comment="Execution time in seconds, default 0",
        ),
        sa.Column(
            "exposures",
            sa.INTEGER().with_variant(mysql.INTEGER(), "mysql").with_variant(sa.INTEGER(), "postgresql"),
            server_default=sa.text("0"),
            nullable=True,
            comment="Number of exposures processed, default 0",
        ),
        sa.Column(
            "visits1",
            sa.INTEGER().with_variant(mysql.INTEGER(), "mysql").with_variant(sa.INTEGER(), "postgresql"),
            server_default=sa.text("0"),
            nullable=True,
            comment="Number of visits recorded, default 0",
        ),
        sa.Column(
            "retries",
            sa.INTEGER().with_variant(mysql.INTEGER(), "mysql").with_variant(sa.INTEGER(), "postgresql"),
            server_default=sa.text("0"),
            nullable=True,
            comment="Number of retries attempted, default 0",
        ),
        sa.Column(
            "error",
            sa.TEXT().with_variant(mysql.LONGTEXT(), "mysql").with_variant(sa.TEXT(), "postgresql"),
            nullable=True,
            comment="Error message, if any",
        ),
        sa.Column(
            "butler_repo",
            sa.TEXT().with_variant(mysql.LONGTEXT(), "mysql").with_variant(sa.TEXT(), "postgresql"),
            nullable=True,
        ),
        sa.Column(
            "created_at",
            sa.TIMESTAMP()
            .with_variant(mysql.DATETIME(), "mysql")
            .with_variant(postgresql.TIMESTAMP(), "postgresql"),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=True,
            comment="Timestamp when record was created, default current timestamp",
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="efd_scheduler",
        comment="Scheduler for lsstcomcam.",
        mysql_engine="MyISAM",
    )

    # grant table access to oods and usdf
    op.execute("GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA efd TO oods")
    op.execute("GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA efd_scheduler TO oods")
    op.execute("GRANT SELECT ON ALL TABLES IN SCHEMA efd_scheduler TO usdf")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("lsstcomcam", schema="efd_scheduler")
    op.drop_table("lsstcam", schema="efd_scheduler")
    op.drop_table("latiss", schema="efd_scheduler")
    # ### end Alembic commands ###
